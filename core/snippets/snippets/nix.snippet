language: nix
---

name: nixSet
phrase: set
insertionScope: statement
-
$0 = {

};
---

name: nixFlakeTemplate
phrase: flake
insertionScope: statement
-
{
  description = "A Nix-flake-based $1 development environment";

  inputs.nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";

  outputs = { self, nixpkgs }:
    let
      supportedSystems = [ "x86_64-linux" "aarch64-linux" "x86_64-darwin" "aarch64-darwin" ];
      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import nixpkgs { inherit system; };
      });
    in
    {
      devShells = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.mkShell {
          packages = with pkgs; [
            $0
          ];
        };
      });
    };
}
---

name: nixvimKeymap
phrase: vim key map
insertionScope: statement
-
      {
        mode = [ "$1" ];
        key = "$2";
        action = "$3";
        options = { noremap = true; };
      }
---

name: nixHomeManagerFile
phrase: nix keep file
insertionScope: statement
-
home.file."$0/.keep".text = "# Managed by Home Manager";
---

name: nixIfDarwin
phrase: if darwin
insertionScope: statement
-
if pkgs.stdenv.isDarwin then
  $1
else
  $2;
---

name: nixFullModule
phrase: full module
insertionScope: statement
-
{ config, lib, pkgs, ... }:

{
  imports = [
    $0
  ];
  options = {
    $1
  };
  config = {
    $2
  };

}
---

name: nixInheritedPackages
phrase: inherited packages
insertionScope: statement
-
builtins.attrValues {
    inherit (pkgs)
    $0
    ;
};
---

name: nixLetIn
phrase: let in
insertionScope: statement
-
let
  $0
in
---
