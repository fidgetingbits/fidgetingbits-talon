# this is adapted from @rntz script:
# https://gist.github.com/rntz/914bdb60187858d4a014e82fbcf591c3

from talon import Module, actions, app, noise, ui

mod = Module()


@mod.action_class
class Actions:
    # def custom_pop():
    #     """pop action overrideable by contexts"""
    #     print("noise.py - pop()")
    #     # actions.user.mouse()
    #     global pop_quick_action
    #     if pop_quick_action is None:
    #         actions.tracking.zoom(True)
    #         # actions.user.pop()
    #     else:
    #         actions.user.pop_quick_action_run()

    def pop_quick_action_clear():
        """Clears the quick macro"""
        global pop_quick_action
        global pop_quick_action_last
        if pop_quick_action:
            pop_quick_action_last = pop_quick_action
            pop_quick_action = None
            actions.user.notify("pop quick action cleared")

    # XXX - it would be nice to have some sort of indicator for this
    # similar to talon_hud stuff
    def pop_quick_action_set():
        """Sets the quick macro"""
        global pop_quick_action
        pop_quick_action = actions.core.last_command()
        actions.user.notify(f"pop quick action set\n{pop_quick_action}")

    def pop_quick_action_set_last():
        """Sets the quick macro to the previously set action"""
        global pop_quick_action
        global pop_quick_action_last
        pop_quick_action = pop_quick_action_last
        actions.user.notify(f"pop quick action set\n{pop_quick_action}")

    def pop_quick_action_run():
        """Runs the quick macro"""
        print(*pop_quick_action)
        actions.core.run_command(*pop_quick_action)

    def hiss():
        """hiss action overrideable by contexts"""
        print("hissing")

    def hiss_quick_action_clear():
        """Clears the quick macro"""
        global hiss_quick_action
        global hiss_quick_action_last
        hiss_quick_action_last = hiss_quick_action
        hiss_quick_action = None

    def hiss_quick_action_set():
        """Sets the quick macro"""
        global hiss_quick_action
        hiss_quick_action = actions.core.last_command()
        actions.user.notify(f"hiss quick action set\n{pop_quick_action}")

    def hiss_quick_action_set_last():
        """Sets the quick macro to the previously set action"""
        global hiss_quick_action
        global hiss_quick_action_last
        hiss_quick_action = hiss_quick_action_last
        actions.user.notify(f"hiss quick action set\n{pop_quick_action}")

    def hiss_quick_action_run():
        """Runs the quick macro"""
        print(*hiss_quick_action)
        actions.core.run_command(*hiss_quick_action)


def on_ready():
    ui.register("app_deactivate", lambda app: actions.user.pop_quick_action_clear())
    ui.register("win_focus", lambda win: actions.user.pop_quick_action_clear())


app.register("ready", on_ready)

pop_quick_action = None
pop_quick_action_last = None
pop_quick_action_history = []


def on_pop(active):
    print("noise.py - on_pop")
    global pop_quick_action
    if pop_quick_action is None:
        actions.user.pop()
    else:
        actions.user.pop_quick_action_run()


hiss_quick_action = None
hiss_quick_action_last = None
hiss_quick_action_history = []


def on_hiss(active):
    global hiss_quick_action
    if hiss_quick_action is None:
        actions.user.hiss()
    else:
        actions.user.hiss_quick_action_run()


# try:
#     noise.register("pop", on_pop)
#     # noise.register("hiss", on_hiss)
# except talon.lib.cubeb.CubebError as e:
#     actions.user.notify("Failed to register pop. Is possible audio error")
#     print("Failed to register pop. Is possible audio error")
#     print(e)
#
# try:
#     noise.register("hiss", on_hiss)
# except talon.lib.cubeb.CubebError as e:
#     actions.user.notify("Failed to register hiss. Is possible audio error")
#     print("Failed to register hiss. Is possible audio error")
#     print(e)
